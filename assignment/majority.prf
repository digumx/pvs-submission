(majority
 (size_TCC1 0
  (size_TCC1-1 nil 3795544884
   ("" (auto-rewrite-defs)
    (("" (skosimp*) (("" (rewrite -1 1) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[VoteSequence])" majority
     nil))
   nil))
 (Size_0_Null 0
  (Size_0_Null-1 nil 3795544979
   ("" (auto-rewrite-defs)
    (("" (induct v) (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((VoteSequence type-decl nil majority nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" majority nil)
    (Null? adt-recognizer-decl "[VoteSequence -> boolean]" majority
     nil)
    (Null adt-constructor-decl "(Null?)" majority nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (Concat_Size 0
  (Concat_Size-1 nil 3795545015
   ("" (auto-rewrite-defs)
    (("" (skolem!)
      (("" (induct v2)
        (("1" (assert) nil nil)
         ("2" (skosimp*) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (concat def-decl "VoteSequence" majority nil)
    (size def-decl "nat" majority nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (VoteSequence type-decl nil majority nil))
   shostak))
 (Concat_Tally 0
  (Concat_Tally-1 nil 3795545098
   ("" (auto-rewrite-defs)
    (("" (skolem!)
      (("" (skolem!)
        (("" (apply-extensionality)
          (("" (delete 2)
            (("" (generalize-skolem-constants)
              (("" (induct v2_1)
                (("1" (skosimp*) (("1" (assert) nil nil)) nil)
                 ("2" (skosimp*)
                  (("2" (assert) (("2" (rewrite -1 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Candidate type-decl nil majority nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tally_sum const-decl "Tally" majority nil)
    (concat def-decl "VoteSequence" majority nil)
    (tally_votes def-decl "Tally" majority nil)
    (Tally type-eq-decl nil majority nil)
    (VoteSequence type-decl nil majority nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tally_null const-decl "Tally" majority nil)
    (VoteSequence_induction formula-decl nil majority nil))
   shostak))
 (Tally_2 0
  (Tally_2-1 nil 3795545253
   ("" (auto-rewrite-defs)
    (("" (skolem!)
      (("" (induct v)
        (("1" (assert) nil nil)
         ("2" (skosimp*)
          (("2" (case "c1!1 = c2!1 OR c1!1 /= c2!1")
            (("1" (split -1)
              (("1" (propax) nil nil)
               ("2" (smash)
                (("2" (rewrite tally_cand 2)
                  (("2" (rewrite tally_cand 2)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (bddsimp)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil)
                             ("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (smash) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tally_cand const-decl "Tally" majority nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tally_sum const-decl "Tally" majority nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (tally_null const-decl "Tally" majority nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (size def-decl "nat" majority nil)
    (tally_votes def-decl "Tally" majority nil)
    (Tally type-eq-decl nil majority nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (Candidate type-decl nil majority nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (VoteSequence type-decl nil majority nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (maj_TCC1 0
  (maj_TCC1-1 nil 3795544884
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (maj2_TCC1 0
  (maj2_TCC1-1 nil 3795544884
   ("" (auto-rewrite-defs)
    (("" (skosimp*) (("" (assert) nil nil)) nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (maj2_TCC2 0
  (maj2_TCC2-1 nil 3795544884
   ("" (auto-rewrite-defs)
    (("" (skosimp*) (("" (assert) nil nil)) nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (Maj_Maj2_Equiv 0
  (Maj_Maj2_Equiv-1 nil 3795545627
   ("" (auto-rewrite-defs)
    (("" (induct v)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skosimp*) (("3" (smash) nil nil)) nil))
      nil))
    nil)
   ((VoteSequence type-decl nil majority nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Candidate type-decl nil majority nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (State2 type-decl nil majority nil)
    (c2 adt-accessor-decl "[State2 -> Candidate]" majority nil)
    (maj2 def-decl "State2" majority nil)
    (State type-decl nil majority nil)
    (c adt-accessor-decl "[State -> Candidate]" majority nil)
    (maj def-decl "State" majority nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n2 adt-accessor-decl "[State2 -> nat]" majority nil)
    (n adt-accessor-decl "[State -> nat]" majority nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (Maj2_Concat 0
  (Maj2_Concat-1 nil 3795545678
   ("" (auto-rewrite-defs)
    (("" (induct v)
      (("1" (assert) nil nil)
       ("2" (skosimp*) (("2" (smash) nil nil)) nil))
      nil))
    nil)
   ((VoteSequence type-decl nil majority nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (concat def-decl "VoteSequence" majority nil)
    (State2 type-decl nil majority nil)
    (vr adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (maj2 def-decl "State2" majority nil)
    (vz adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (Maj2_0_Vz_Null 0
  (Maj2_0_Vz_Null-1 nil 3795545721
   ("" (auto-rewrite-defs)
    (("" (induct v)
      (("1" (assert) nil nil)
       ("2" (skosimp*) (("2" (smash) nil nil)) nil))
      nil))
    nil)
   ((VoteSequence type-decl nil majority nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (State2 type-decl nil majority nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n2 adt-accessor-decl "[State2 -> nat]" majority nil)
    (maj2 def-decl "State2" majority nil)
    (vz adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (Null? adt-recognizer-decl "[VoteSequence -> boolean]" majority
     nil)
    (Null adt-constructor-decl "(Null?)" majority nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (Maj2_Inv0 0
  (Maj2_Inv0-1 nil 3795545769
   ("" (auto-rewrite-defs)
    (("" (induct v)
      (("1" (assert) nil nil)
       ("2" (skosimp*)
        (("2" (rewrite maj2 1)
          (("2" (lift-if)
            (("2" (bddsimp)
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) nil nil)
               ("4" (beta)
                (("4" (rewrite Maj2_Concat 4 :dir RL)
                  (("4" (rewrite maj2 4)
                    (("4" (lift-if)
                      (("4" (bddsimp) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VoteSequence type-decl nil majority nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (State2 type-decl nil majority nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n2 adt-accessor-decl "[State2 -> nat]" majority nil)
    (maj2 def-decl "State2" majority nil)
    (vr adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (Vote adt-constructor-decl "[[Candidate, VoteSequence] -> (Vote?)]"
     majority nil)
    (Vote? adt-recognizer-decl "[VoteSequence -> boolean]" majority
     nil)
    (Candidate type-decl nil majority nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Maj2_Concat formula-decl nil majority nil))
   shostak))
 (Maj2_Inv1 0
  (Maj2_Inv1-1 nil 3795545905
   ("" (auto-rewrite-defs)
    (("" (induct v)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skosimp*)
        (("3" (smash)
          (("3" (rewrite Maj2_0_Vz_Null 1) (("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VoteSequence type-decl nil majority nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Candidate type-decl nil majority nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Tally type-eq-decl nil majority nil)
    (tally_votes def-decl "Tally" majority nil)
    (size def-decl "nat" majority nil)
    (State2 type-decl nil majority nil)
    (n2 adt-accessor-decl "[State2 -> nat]" majority nil)
    (maj2 def-decl "State2" majority nil)
    (c2 adt-accessor-decl "[State2 -> Candidate]" majority nil)
    (vz adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (tally_null const-decl "Tally" majority nil)
    (tally_cand const-decl "Tally" majority nil)
    (tally_sum const-decl "Tally" majority nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (Maj2_0_Vz_Null formula-decl nil majority nil))
   shostak))
 (Maj2_Inv2 0
  (Maj2_Inv2-2 "" 3795548463
   ("" (auto-rewrite-defs)
    (("" (skolem!)
      (("" (induct N)
        (("1" (skosimp*)
          (("1" (rewrite Size_0_Null -2) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (skolem!)
          (("2" (flatten)
            (("2" (induct v)
              (("1" (assert) nil nil)
               ("2" (skosimp*)
                (("2"
                  (case "2*tally_votes(Vote2_var!1)(c!1)>size(Vote2_var!1) OR 
             2*tally_votes(Vote2_var!1)(c!1)<=size(Vote2_var!1)")
                  (("1" (split -1)
                    (("1" (smash) nil nil)
                     ("2" (case "Vote1_var!1=c!1 OR Vote1_var!1/=c!1")
                      (("1" (split -1)
                        (("1"
                          (case "n2(maj2(Vote2_var!1))=0 OR n2(maj2(Vote2_var!1))>=1")
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2"
                              (case "c2(maj2(Vote2_var!1))=c!1 OR c2(maj2(Vote2_var!1))/=c!1")
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lemma
                                   "Maj2_Inv1"
                                   ("v" "Vote2_var!1"))
                                  (("2"
                                    (beta -1)
                                    (("2"
                                      (lemma
                                       "Tally_2"
                                       ("c1"
                                        "c2(maj2(Vote2_var!1))"
                                        "c2"
                                        "c!1"
                                        "v"
                                        "vz(maj2(Vote2_var!1))"))
                                      (("2"
                                        (inst
                                         -1
                                         "vz(maj2(Vote2_var!1))")
                                        (("2"
                                          (lemma
                                           "Concat_Tally"
                                           ("v1"
                                            "vr(maj2(Vote2_var!1))"
                                            "v2"
                                            "vz(maj2(Vote2_var!1))"))
                                          (("2"
                                            (inst
                                             -1
                                             "vz(maj2(Vote2_var!1))")
                                            (("2"
                                              (decompose-equality -1)
                                              (("2"
                                                (instantiate -1 "c!1")
                                                (("2"
                                                  (rewrite
                                                   "Maj2_Concat"
                                                   -1
                                                   :dir
                                                   RL)
                                                  (("2"
                                                    (rewrite
                                                     "tally_sum"
                                                     -1)
                                                    (("2"
                                                      (instantiate
                                                       -10
                                                       "vr(maj2(Vote2_var!1))")
                                                      (("2"
                                                        (lemma
                                                         "Maj2_Inv0"
                                                         ("v"
                                                          "Vote2_var!1"))
                                                        (("2"
                                                          (lemma
                                                           "Concat_Size"
                                                           ("v1"
                                                            "vr(maj2(Vote2_var!1))"))
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "vz(maj2(Vote2_var!1))")
                                                            (("2"
                                                              (rewrite
                                                               "Maj2_Concat"
                                                               -1
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (rewrite
                                                                 "size"
                                                                 -10)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (smash) nil nil))
                              nil))
                            nil)
                           ("2" (smash) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (smash) nil nil))
                      nil))
                    nil)
                   ("2" (smash) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (VoteSequence type-decl nil majority nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (size def-decl "nat" majority nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Candidate type-decl nil majority nil)
    (Tally type-eq-decl nil majority nil)
    (tally_votes def-decl "Tally" majority nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (State2 type-decl nil majority nil)
    (c2 adt-accessor-decl "[State2 -> Candidate]" majority nil)
    (maj2 def-decl "State2" majority nil)
    (n2 adt-accessor-decl "[State2 -> nat]" majority nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Size_0_Null formula-decl nil majority nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tally_null const-decl "Tally" majority nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tally_sum const-decl "Tally" majority nil)
    (tally_cand const-decl "Tally" majority nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (Maj2_Inv0 formula-decl nil majority nil)
    (Vote adt-constructor-decl "[[Candidate, VoteSequence] -> (Vote?)]"
     majority nil)
    (Vote? adt-recognizer-decl "[VoteSequence -> boolean]" majority
     nil)
    (Concat_Size formula-decl nil majority nil)
    (Maj2_Concat formula-decl nil majority nil)
    (concat def-decl "VoteSequence" majority nil)
    (vr adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (Concat_Tally formula-decl nil majority nil)
    (vz adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (Tally_2 formula-decl nil majority nil)
    (Maj2_Inv1 formula-decl nil majority nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak)
  (Maj2_Inv2-1 nil 3795546075
   ("" (auto-rewrite-defs)
    (("" (skolem!)
      (("" (induct N)
        (("1" (skosimp*)
          (("1" (rewrite Size_0_Null -2) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (skolem!)
          (("2" (flatten)
            (("2" (induct v)
              (("1" (assert) nil nil)
               ("2" (skosimp*)
                (("2"
                  (case "2*tally_votes(Vote2_var!1)(c!1)>size(Vote2_var!1) OR 
             2*tally_votes(Vote2_var!1)(c!1)<=size(Vote2_var!1)")
                  (("1" (split -1)
                    (("1" (smash) nil nil)
                     ("2" (case "Vote1_var!1=c!1 OR Vote1_var!1/=c!1")
                      (("1" (split -1)
                        (("1"
                          (case "n2(maj2(Vote2_var!1))=0 OR n2(maj2(Vote2_var!1))>=1")
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2"
                              (case "c2(maj2(Vote2_var!1))=c!1 OR c2(maj2(Vote2_var!1))/=c!1")
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lemma
                                   "Maj2_Inv1"
                                   ("v" "Vote2_var!1"))
                                  (("2"
                                    (beta -1)
                                    (("2"
                                      (lemma
                                       "Tally_2"
                                       ("c1"
                                        "c2(maj2(Vote2_var!1))"
                                        "c2"
                                        "c!1"
                                        "v"
                                        "vz(maj2(Vote2_var!1))"))
                                      (("2"
                                        (inst
                                         -1
                                         "vz(maj2(Vote2_var!1))")
                                        (("2"
                                          (lemma
                                           "Concat_Tally"
                                           ("v1"
                                            "vr(maj2(Vote2_var!1))"
                                            "v2"
                                            "vz(maj2(Vote2_var!1))"))
                                          (("2"
                                            (inst
                                             -1
                                             "vz(maj2(Vote2_var!1))")
                                            (("2"
                                              (decompose-equality -1)
                                              (("2"
                                                (instantiate -1 "c!1")
                                                (("2"
                                                  (rewrite
                                                   "Maj2_Concat"
                                                   -1
                                                   :dir
                                                   RL)
                                                  (("2"
                                                    (rewrite
                                                     "tally_sum"
                                                     -1)
                                                    (("2"
                                                      (instantiate
                                                       -10
                                                       "vr(maj2(Vote2_var!1))")
                                                      (("2"
                                                        (lemma
                                                         "Maj2_Inv0"
                                                         ("v"
                                                          "Vote2_var!1"))
                                                        (("2"
                                                          (lemma
                                                           "Concat_Size"
                                                           ("v1"
                                                            "vr(maj2(Vote2_var!1))"
                                                            "v2"
                                                            "vz(maj2(Vote2_var!1))"))
                                                          (("2"
                                                            (rewrite
                                                             "size"
                                                             -10)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (smash)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("5"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("6"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (VoteSequence type-decl nil majority nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (size def-decl "nat" majority nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Candidate type-decl nil majority nil)
    (Tally type-eq-decl nil majority nil)
    (tally_votes def-decl "Tally" majority nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (State2 type-decl nil majority nil)
    (c2 adt-accessor-decl "[State2 -> Candidate]" majority nil)
    (maj2 def-decl "State2" majority nil)
    (n2 adt-accessor-decl "[State2 -> nat]" majority nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Size_0_Null formula-decl nil majority nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tally_null const-decl "Tally" majority nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tally_sum const-decl "Tally" majority nil)
    (tally_cand const-decl "Tally" majority nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (Maj2_Inv0 formula-decl nil majority nil)
    (Vote adt-constructor-decl "[[Candidate, VoteSequence] -> (Vote?)]"
     majority nil)
    (Vote? adt-recognizer-decl "[VoteSequence -> boolean]" majority
     nil)
    (Concat_Size formula-decl nil majority nil)
    (Maj2_Concat formula-decl nil majority nil)
    (concat def-decl "VoteSequence" majority nil)
    (vr adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (Concat_Tally formula-decl nil majority nil)
    (vz adt-accessor-decl "[State2 -> VoteSequence]" majority nil)
    (Tally_2 formula-decl nil majority nil)
    (Maj2_Inv1 formula-decl nil majority nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (VoteSequence_induction formula-decl nil majority nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (Majority_Correct 0
  (Majority_Correct-1 nil 3795548552
   ("" (skosimp*)
    (("" (rewrite majority 1)
      (("" (lemma "Maj_Maj2_Equiv" ("v" "v!1"))
        (("" (flatten -1)
          (("" (rewrite -1 1 :dir RL)
            (("" (lemma "Maj2_Inv2" ("c" "c!1"))
              (("" (inst -1 "size(v!1)" "v!1") (("" (smash) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((majority const-decl "Candidate" majority nil)
    (VoteSequence type-decl nil majority nil)
    (Maj2_Inv2 formula-decl nil majority nil)
    (Candidate type-decl nil majority nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size def-decl "nat" majority nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Maj_Maj2_Equiv formula-decl nil majority nil))
   shostak)))

