(balls
 (remove_b_TCC1 0
  (remove_b_TCC1-1 nil 3795548906
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (remove_w_TCC1 0
  (remove_w_TCC1-1 nil 3795548906
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Pick_2_Pred_Nonempty 0
  (Pick_2_Pred_Nonempty-1 nil 3795549167
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (typepred "bg!1")
        (("" (rewrite "pick_2_pred" 1)
          ((""
            (case "bg!1`1 >= 2 OR bg!1`2 >= 2 OR (bg!1`1 = 1 AND bg!1`2 = 1)")
            (("1" (split -1)
              (("1" (inst 1 "(B, B)") nil nil)
               ("2" (inst 1 "(W, W)") (("2" (assert) nil nil)) nil)
               ("3" (inst 1 "(B, W)") (("3" (smash) nil nil)) nil))
              nil)
             ("2" (smash) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (Ball type-decl nil balls nil)
    (B? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (B adt-constructor-decl "(B?)" balls nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (W? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (W adt-constructor-decl "(W?)" balls nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil) (size const-decl "nat" balls nil))
   shostak))
 (ball_step_TCC1 0
  (ball_step_TCC1-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
          (("" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
            (("" (smash)
              (("" (rewrite -4 -2 :dir RL)
                (("" (rewrite -3 -2) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (Pick_2_Pred_Nonempty formula-decl nil balls nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil) (size const-decl "nat" balls nil)
    (pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (Ball type-decl nil balls nil))
   nil))
 (ball_step_TCC2 0
  (ball_step_TCC2-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
          (("" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
            (("" (smash)
              (("" (rewrite -4 -2 :dir RL)
                (("" (rewrite -3 -2) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_b const-decl "Bag" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (Pick_2_Pred_Nonempty formula-decl nil balls nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil) (size const-decl "nat" balls nil)
    (pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (Ball type-decl nil balls nil))
   nil))
 (ball_step_TCC3 0
  (ball_step_TCC3-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
          (("" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
            (("" (smash) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (Pick_2_Pred_Nonempty formula-decl nil balls nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil) (size const-decl "nat" balls nil)
    (pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (Ball type-decl nil balls nil))
   nil))
 (ball_step_TCC4 0
  (ball_step_TCC4-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
          (("" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
            (("" (smash) (("" (rewrite -4 -2 :dir RL) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_w const-decl "Bag" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (Pick_2_Pred_Nonempty formula-decl nil balls nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil) (size const-decl "nat" balls nil)
    (pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (Ball type-decl nil balls nil))
   nil))
 (ball_step_TCC5 0
  (ball_step_TCC5-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
          (("" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
            (("" (smash) (("" (rewrite -4 -2 :dir RL) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (Pick_2_Pred_Nonempty formula-decl nil balls nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil) (size const-decl "nat" balls nil)
    (pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (Ball type-decl nil balls nil))
   nil))
 (ball_step_TCC6 0
  (ball_step_TCC6-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
          (("" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
            (("" (smash) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_b const-decl "Bag" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (Pick_2_Pred_Nonempty formula-decl nil balls nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil) (size const-decl "nat" balls nil)
    (pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (Ball type-decl nil balls nil))
   nil))
 (ball_step_TCC7 0
  (ball_step_TCC7-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (case "p2!1 = (W, W)")
        (("1" (assert)
          (("1" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
            (("1" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
              (("1" (smash) nil nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
            (("2" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
              (("2" (smash)
                (("2" (case "p2!1`1 = W OR p2!1`1 = B")
                  (("1" (case "p2!1`2 = W OR p2!1`2 = B")
                    (("1" (split -1)
                      (("1" (split -2)
                        (("1" (decompose-equality 1) nil nil)
                         ("2" (decompose-equality 3) nil nil))
                        nil)
                       ("2" (split -2)
                        (("1" (decompose-equality 2) nil nil)
                         ("2" (decompose-equality 4) nil nil))
                        nil))
                      nil)
                     ("2" (smash) nil nil))
                    nil)
                   ("2" (case "p2!1`2 = W OR p2!1`2 = B")
                    (("1" (smash) nil nil) ("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((W adt-constructor-decl "(W?)" balls nil)
    (W? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Ball type-decl nil balls nil)
    (pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (size const-decl "nat" balls nil) (Bag type-eq-decl nil balls nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Pick_2_Pred_Nonempty formula-decl nil balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (B adt-constructor-decl "(B?)" balls nil)
    (B? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (ball_step_TCC8 0
  (ball_step_TCC8-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (case "p2!1 = (W, W)")
        (("1" (assert)
          (("1" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
            (("1" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
              (("1" (smash) nil nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (lemma "epsilon_ax" ("p" "pick_2_pred(bg!1)"))
            (("2" (lemma "Pick_2_Pred_Nonempty" ("bg" "bg!1"))
              (("2" (smash)
                (("2" (case "p2!1`1 = W OR p2!1`1 = B")
                  (("1" (case "p2!1`2 = W OR p2!1`2 = B")
                    (("1" (split -1)
                      (("1" (split -2)
                        (("1" (decompose-equality 1) nil nil)
                         ("2" (decompose-equality 3) nil nil))
                        nil)
                       ("2" (split -2)
                        (("1" (decompose-equality 2) nil nil)
                         ("2" (decompose-equality 4) nil nil))
                        nil))
                      nil)
                     ("2" (smash) nil nil))
                    nil)
                   ("2" (case "p2!1`2 = W OR p2!1`2 = B")
                    (("1" (smash) nil nil) ("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((W adt-constructor-decl "(W?)" balls nil)
    (W? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Ball type-decl nil balls nil)
    (pick_2_pred const-decl "[[Ball, Ball] -> bool]" balls nil)
    (size const-decl "nat" balls nil) (Bag type-eq-decl nil balls nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Pick_2_Pred_Nonempty formula-decl nil balls nil)
    (remove_w const-decl "Bag" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (B adt-constructor-decl "(B?)" balls nil)
    (B? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (Ball_Step_Reduce 0
  (Ball_Step_Reduce-1 nil 3795550565
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (rewrite "ball_step" 1) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (add_b const-decl "Bag" balls nil)
    (remove_w const-decl "Bag" balls nil)
    (add_w const-decl "Bag" balls nil)
    (remove_b const-decl "Bag" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (size const-decl "nat" balls nil) (Bag type-eq-decl nil balls nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ball_step const-decl "Bag" balls nil))
   shostak))
 (ball_game_TCC1 0
  (ball_game_TCC1-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (typepred "bg!1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((size const-decl "nat" balls nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil)
    (NonemptyBag type-eq-decl nil balls nil))
   nil))
 (ball_game_TCC2 0
  (ball_game_TCC2-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (typepred "bg!1")
        (("" (rewrite "ball_step" 2) (("" (smash) nil nil)) nil)) nil))
      nil))
    nil)
   ((ball_step const-decl "Bag" balls nil)
    (size const-decl "nat" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (remove_b const-decl "Bag" balls nil)
    (add_w const-decl "Bag" balls nil)
    (remove_w const-decl "Bag" balls nil)
    (add_b const-decl "Bag" balls nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil)
    (NonemptyBag type-eq-decl nil balls nil))
   nil))
 (ball_game_TCC3 0
  (ball_game_TCC3-1 nil 3795548906
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (typepred "bg!1")
        (("" (case "size(bg!1) >= 2")
          (("1" (lemma "Ball_Step_Reduce" ("bg" "bg!1"))
            (("1" (assert) nil nil)) nil)
           ("2" (smash) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Ball_Step_Reduce formula-decl nil balls nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil)
    (NonemptyBag type-eq-decl nil balls nil))
   nil))
 (Even_Black_Inv 0
  (Even_Black_Inv-1 nil 3795550944
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (rewrite ball_step)
        (("" (lift-if)
          (("" (smash)
            (("1" (skosimp*)
              (("1" (inst 1 "j!1 - 1") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst 1 "j!1 + 1") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even? const-decl "bool" integers nil)
    (even_black? const-decl "bool" balls nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (add_b const-decl "Bag" balls nil)
    (remove_w const-decl "Bag" balls nil)
    (add_w const-decl "Bag" balls nil)
    (remove_b const-decl "Bag" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (size const-decl "nat" balls nil) (Bag type-eq-decl nil balls nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ball_step const-decl "Bag" balls nil))
   shostak))
 (Last_Ball 0
  (Last_Ball-1 nil 3795551076
   ("" (auto-rewrite-defs)
    (("" (measure-induct "size(bg)" "bg")
      (("" (skosimp*)
        (("" (rewrite "ball_game" 1)
          (("" (smash)
            (("1" (lemma "Even_Black_Inv" ("bg" "x!1"))
              (("1" (flatten -1)
                (("1" (lemma "Ball_Step_Reduce" ("bg" "x!1"))
                  (("1" (inst -4 "ball_step(x!1)")
                    (("1" (smash) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "x!1 = (1, 0) OR x!1 = (0, 1)")
              (("1" (split -1)
                (("1" (propax) nil nil)
                 ("2" (inst 1 "0") (("2" (assert) nil nil)) nil))
                nil)
               ("2" (flatten) (("2" (decompose-equality 1) nil nil))
                nil))
              nil)
             ("3" (lemma "Ball_Step_Reduce" ("bg" "x!1"))
              (("3" (lemma "Even_Black_Inv" ("bg" "x!1"))
                (("3" (flatten -1)
                  (("3" (inst -4 "ball_step(x!1)")
                    (("3" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NonemptyBag type-eq-decl nil balls nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" balls nil) (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (even_black? const-decl "bool" balls nil)
    (Ball type-decl nil balls nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ball_game def-decl "Ball" balls nil)
    (W? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (W adt-constructor-decl "(W?)" balls nil)
    (B? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (B adt-constructor-decl "(B?)" balls nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (Even_Black_Inv formula-decl nil balls nil)
    (Ball_Step_Reduce formula-decl nil balls nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball_step const-decl "Bag" balls nil)
    (even? const-decl "bool" integers nil))
   shostak)))

