(hoare_triples
 (skip_rule 0
  (skip_rule-1 nil 3795057382
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert) (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak))
 (assignment_rule 1
  (assignment_rule-2 "grind proof" 3795057741 ("" (grind) nil nil) nil
   shostak)
  (assignment_rule-1 nil 3795057557
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert) (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (O const-decl "T3" function_props nil)
    (last const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak))
 (x_plus_y_check 0
  (x_plus_y_check-3 "grind$" 3795347579
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (replace*)
            ((""
              (assert :let-reduce? t :quant-simp? nil
                      :implicit-typepreds? nil :ignore-typepreds? nil
                      :cases-rewrite? nil)
              nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (x_plus_y_check-2 "proof with grind" 3795347497 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (x_gets_x_plus_1 const-decl "assignment" hoare_triples nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (x_plus_y_check-1 nil 3795347284
   ("" (auto-rewrite-defs)
    (("" (assert) (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (x_gets_x_plus_1 const-decl "assignment" hoare_triples nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak))
 (conditional_rule 0
  (conditional_rule-1 nil 3795058108
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (skosimp*)
          (("" (inst?) (("" (inst?) (("" (smash) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first const-decl "state" Hoare_logic nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (last const-decl "state" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil)
    (~ const-decl "bool" hoare_triples nil)
    ([\|\|] def-decl "bool" Hoare_logic nil))
   shostak))
 (while_rule 0
  (while_rule-2 "proof with smash and no grind" 3795064716
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (measure-induct+ "X`length" "X")
        (("" (expand "triple_holds")
          (("" (expand "[||]" +)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst - "Z")
                  (("1" (inst - "Y")
                    (("1" (auto-rewrite-defs)
                      (("1" (stop-rewrite "[||]")
                        (("1" (assert)
                          (("1" (replace*) (("1" (smash) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (auto-rewrite-defs)
                (("2" (stop-rewrite "[||]") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((triple_valid const-decl "bool" hoare_triples nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (~ const-decl "bool" hoare_triples nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (test type-eq-decl nil Hoare_logic nil)
    (** adt-constructor-decl "[[test, program] -> (while?)]"
     Hoare_logic nil)
    (while? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)
  (while_rule-1 nil 3795063002
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (measure-induct+ "X`length" "X")
        (("" (expand "triple_holds")
          (("" (expand "[||]" +)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst - "Z")
                  (("1" (inst - "Y")
                    (("1" (grind :exclude "[||]") nil nil)) nil))
                  nil))
                nil)
               ("2" (grind :exclude "meaning") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((triple_valid const-decl "bool" hoare_triples nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (~ const-decl "bool" hoare_triples nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (test type-eq-decl nil Hoare_logic nil)
    (** adt-constructor-decl "[[test, program] -> (while?)]"
     Hoare_logic nil)
    (while? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (conseq_rule 0
  (conseq_rule-2 "without grind" 3795069149
   ("" (skeep)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?) (("" (inst?) (("" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (yes "simple grind" 3795068978
   ("" (skeep)
    (("" (auto-rewrite-defs)
      (("" (assert) (("" (skosimp*) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (conseq const-decl "bool" hoare_triples nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (conseq_rule-1 nil 3795068696
   ("" (skeep)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*) (("" (grind :exclude "[||]") nil nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (conseq const-decl "bool" hoare_triples nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak))
 (wlp_valid 0
  (wlp_valid-5 "glass box grind" 3795395150
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      (("" (skolem-typepred)
        (("" (skolem-typepred)
          (("" (flatten)
            ((""
              (assert :let-reduce? t :quant-simp? nil
                      :implicit-typepreds? nil :ignore-typepreds? nil
                      :cases-rewrite? nil)
              (("" (inst? :if-match t :polarity? nil)
                (("" (replace*) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (wlp_valid-4 "with grind" 3795395090 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (wlp const-decl "bool" hoare_triples nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (wlp_valid-3 "mismash" 3795394925
   ("" (skeep)
    (("" (auto-rewrite "triple_valid" "triple_holds" "wlp")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (wlp const-decl "bool" hoare_triples nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (wlp_valid-2 nil 3795394873
   ("" (skeep)
    (("" (auto-rewrite "triple_valid" "triple_holds" "wlp")
      (("" (skeep) (("" (inst?) (("" (prop) nil))))))))
    nil)
   ((triple_valid const-decl "bool" hoare_triples nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (wlp const-decl "bool" hoare_triples nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last const-decl "state" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil))
   nil)
  (wlp_valid-1 nil 3795394553
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (expand "triple_holds")
        (("" (expand "wlp")
          (("" (skeep) (("" (inst?) (("" (prop) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((triple_valid const-decl "bool" hoare_triples nil)
    (wlp const-decl "bool" hoare_triples nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil))
   shostak))
 (wlp_cond 0
  (wlp_cond-1 nil 3796594092
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (rewrite wlp)
        (("" (rewrite wlp)
          (("" (rewrite wlp)
            (("" (apply-extensionality)
              (("" (delete 2) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wlp const-decl "bool" hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (ift? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (IF adt-constructor-decl "[[test, program, program] -> (ift?)]"
     Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (test type-eq-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (first const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (// const-decl "bool" hoare_triples nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (~ const-decl "bool" hoare_triples nil))
   shostak))
 (wlp_is_inv 0
  (wlp_is_inv-proof "This is the actual proof." 3796614642
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (expand "triple_holds")
        (("" (skosimp*)
          (("" (auto-rewrite-defs)
            (("" (rewrite "/\\" -2)
              (("" (flatten -2)
                (("" (rewrite "wlp")
                  (("" (skosimp*)
                    (("" (name "Z" "splice(X!1, X!2)")
                      (("1" (case "Q(last(Z))")
                        (("1" (delete -3 -4 -5 -6 -7 -8)
                          (("1" (rewrite "splice" -2)
                            (("1" (decompose-equality -2)
                              (("1"
                                (rewrite "last" -3)
                                (("1"
                                  (rewrite -2 -3 :dir RL)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete 2)
                          (("2" (case "X!1`seq(0) = Z`seq(0)")
                            (("1" (case "[||](S)(Z)")
                              (("1"
                                (inst -5 "Z")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (delete 2)
                                (("2"
                                  (rewrite -3 1)
                                  (("2"
                                    (expand "[||]" 1)
                                    (("2"
                                      (rewrite -1 -4)
                                      (("2"
                                        (expand "first" 1)
                                        (("2"
                                          (expand "last" 1)
                                          (("2"
                                            (prop)
                                            (("2"
                                              (inst 1 "X!1" "X!2")
                                              (("2" (smash) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete 2)
                              (("2"
                                (rewrite "splice" -1)
                                (("2"
                                  (decompose-equality -1)
                                  (("2"
                                    (rewrite -2 1 :dir RL)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (delete 2)
                              (("3"
                                (rewrite "splice" -1)
                                (("3"
                                  (decompose-equality -1)
                                  (("3"
                                    (rewrite -1 1 :dir RL)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (wlp_is_inv-3 "" 3796612448
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (expand "triple_holds")
        (("" (skosimp*)
          (("" (auto-rewrite-defs)
            (("" (rewrite "/\\" -2)
              (("" (flatten -2)
                (("" (rewrite "wlp")
                  (("" (skosimp*)
                    (("" (name "Z" "splice(X!1, X!2)")
                      (("1" (case "Q(last(Z))")
                        (("1" (delete -3 -4 -5 -6 -7 -8)
                          (("1" (rewrite "splice" -2)
                            (("1" (decompose-equality -2)
                              (("1"
                                (rewrite "last" -3)
                                (("1"
                                  (rewrite -2 -3 :dir RL)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete 2)
                          (("2" (case "X!1`seq(0) = Z`seq(0)")
                            (("1" (case "[||](S)(Z)")
                              (("1"
                                (inst -5 "Z")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (delete 2)
                                (("2"
                                  (rewrite -3 1)
                                  (("2"
                                    (expand "[||]" 1)
                                    (("2"
                                      (rewrite -1 -4)
                                      (("2"
                                        (expand "first" 1)
                                        (("2"
                                          (expand "last" 1)
                                          (("2"
                                            (prop)
                                            (("2"
                                              (inst 1 "X!1" "X!2")
                                              (("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((triple_holds const-decl "bool" hoare_triples nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (splice const-decl "trace" Hoare_logic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (last const-decl "state" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (test type-eq-decl nil Hoare_logic nil)
    (wlp const-decl "bool" hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (wlp_is_inv-2 "" 3796606020
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (expand "triple_holds")
        (("" (skosimp*)
          (("" (auto-rewrite-defs)
            (("" (rewrite "/\\" -2)
              (("" (flatten -2)
                (("" (rewrite "wlp")
                  (("" (skosimp*)
                    (("" (name "Z" "splice(X!1, X!2)")
                      (("1" (case "Q(last(Z))")
                        (("1" (delete -3 -4 -5 -6 -7 -8)
                          (("1" (rewrite "splice" -2)
                            (("1" (decompose-equality -2)
                              (("1"
                                (rewrite "last" -3)
                                (("1"
                                  (rewrite -2 -3 :dir RL)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete 2)
                          (("2" (case "[||](S)(Z)")
                            (("1" (inst -4 Z)
                              (("1"
                                (case "X!1`seq(0) = Z`seq(0)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (rewrite splice -2)
                                  (("2"
                                    (decompose-equality -2)
                                    (("2"
                                      (rewrite -2 1 :dir RL)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "splice" -2)
                                  (("3"
                                    (decompose-equality -2)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete 2)
                              (("2"
                                (delete -1 -2 -3 -4 -7)
                                (("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (wlp_is_inv-1 nil 3795405513
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (expand "triple_holds")
        (("" (skosimp*)
          (("" (expand "wlp") (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)))

